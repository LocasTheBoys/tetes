print("Test2")
-- Dapatkan service PathfindingService
local PathfindingService = game:GetService("PathfindingService")

-- Dapatkan pemain dan karakter
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Pastikan karakter sudah dimuat sepenuhnya
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

-- Tentukan lokasi tujuan (Ganti dengan koordinat yang diinginkan)
local targetPosition = Vector3.new(-612.05, 271.38, 214.56)

-- Parameter untuk mengecek apakah karakter berhenti
local maxIdleTime = 2 -- Dalam detik
local idleTime = 0 -- Waktu idle saat ini
local checkInterval = 0.1 -- Interval waktu untuk mengecek karakter

-- Fungsi untuk memindahkan karakter dengan pathfinding
local function moveToPosition(targetPosition)
    -- Buat jalur pathfinding
    local path = PathfindingService:CreatePath({
        AgentRadius = 2,
        AgentHeight = 5,
        AgentCanJump = true,
        AgentJumpHeight = 10,
        AgentMaxSlope = 45
    })

    -- Hitung jalur dari posisi saat ini ke targetPosition
    path:ComputeAsync(humanoidRootPart.Position, targetPosition)

    -- Jika jalur ditemukan
    if path.Status == Enum.PathStatus.Complete then
        local waypoints = path:GetWaypoints()

        -- Looping ke setiap waypoint dalam jalur
        for _, waypoint in ipairs(waypoints) do
            humanoid:MoveTo(waypoint.Position)
            
            -- Tunggu sampai karakter mencapai waypoint
            local reached = humanoid.MoveToFinished:Wait()

            -- Jika karakter berhenti terlalu lama, cari jalan baru
            if not reached then
                warn("Karakter terjebak. Mencoba mencari jalur alternatif...")
                findAlternativePath(targetPosition)
                break
            end

            -- Jika waypoint memerlukan karakter melompat
            if waypoint.Action == Enum.PathWaypointAction.Jump then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end
    else
        -- Jika jalur tidak ditemukan
        warn("Tidak dapat menemukan jalur ke tujuan.")
    end
end

-- Fungsi untuk memonitor karakter apakah berhenti
local function monitorCharacter()
    local previousPosition = humanoidRootPart.Position

    -- Loop untuk memeriksa pergerakan karakter setiap beberapa detik
    while true do
        wait(checkInterval)
        local currentPosition = humanoidRootPart.Position

        -- Jika karakter tidak bergerak
        if (currentPosition - previousPosition).magnitude < 0.1 then
            idleTime = idleTime + checkInterval

            -- Jika idleTime melebihi batas yang ditentukan
            if idleTime >= maxIdleTime then
                warn("Karakter tidak bergerak, mencari jalur baru...")
                findAlternativePath(targetPosition)
                idleTime = 0
            end
        else
            -- Jika karakter bergerak, reset idleTime
            idleTime = 0
        end

        previousPosition = currentPosition
    end
end

-- Fungsi untuk mencari jalur alternatif
function findAlternativePath(targetPosition)
    -- Tentukan posisi alternatif terdekat (di sini kita bisa melakukan pathfinding ulang)
    local alternativePosition = humanoidRootPart.Position + Vector3.new(5, 0, 5) -- Contoh posisi terdekat
    moveToPosition(alternativePosition)
    
    -- Setelah sampai di posisi alternatif, coba lagi menuju target akhir
    moveToPosition(targetPosition)
end

-- Mulai gerakan ke targetPosition
moveToPosition(targetPosition)

-- Mulai monitoring pergerakan karakter
spawn(monitorCharacter) -- Menjalankan fungsi monitor di thread terpisah
